// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String  @id @unique
  firstName      String
  lastName       String
  email          String
  hasOnboarded   Boolean @default(false)
  companyName    String
  companyEmail   String
  companyAddress String
  businessType   String
  currency       String

  customerId String? @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  Invoices Invoice[] // One-to-many: User -> Invoices

  // One-to-one relationship
  subscription Subscription? // A user can have one subscription, or none

  @@map("users")
}

model Invoice {
  id            String @id @default(uuid())
  invoiceNumber String

  // Snapshot fields - Invoices are “frozen in time.” Even if a user changes their name, email, or address, old invoices should still reflect the exact details at the time of issuance (important for accounting/legal compliance).
  companyName    String
  companyEmail   String
  companyAddress String

  clientName          String
  clientEmail         String
  clientAddress       String
  invoiceDate         DateTime
  dueDate             DateTime
  subtotal            Float
  taxPercentage       Float
  discountPercentage  Float
  total               Float
  notes               String?
  logoUrl             String?
  status              InvoiceStatus @default(PENDING)
  paymentInstructions String
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  paidAt              DateTime?

  userId String
  user   User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  items  InvoiceItem[] // One-to-many: Invoice -> InvoiceItems

  @@map("invoices")
}

model InvoiceItem {
  id          String   @id @default(uuid())
  description String
  quantity    Int
  rate        Float
  amount      Float
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  invoiceId String
  invoice   Invoice @relation(fields: [invoiceId], references: [id], onDelete: Cascade)

  @@map("invoice_items")
}

enum InvoiceStatus {
  DRAFT
  PENDING
  PAID
  OVERDUE
}

model Subscription {
  stripeSubscriptionId String    @id @unique
  interval             String
  status               String
  planId               String
  currentPeriodStart   DateTime
  currentPeriodEnd     DateTime
  endedAt              DateTime?
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // One-to-one relationship
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}
